---
#########################
# Update Pulsar cluster configurations for all server components
# - backup existing configurations
# - update with new configurations
# - rolling restart the cluster
#
# It can only do cluster rolling restart if "rolling_restart_only" is true
# -----------------------


#########################
# PreWork before updating the configurations
# -----------------------
# - When bookie rack-awareness is needed, check the validity of 
#   the rack-awareness related configuration settings
- hosts: pulsarServer
  gather_facts: true
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  run_once: true
  roles: 
    - { role: pulsar/common/pulsar_bkieRackMinNumCheck, 
        when: (rolling_restart_only is not defined or not rolling_restart_only|bool) }

# - Get zookeeper list in deseried formats and save them in variables
#   They are needed in later steps for Pulsar configurations
- hosts: zookeeper
  gather_facts: true
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  run_once: true
  roles: 
    - { role: pulsar/zookeeper/_pre_zkArrListVar,
        when: (rolling_restart_only is not defined or not rolling_restart_only|bool) }

# - Get broker list in deseried formats and save them in variables
#   They are needed in later steps for Pulsar configurations
- hosts: broker
  gather_facts: true
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  run_once: true
  roles: 
    - { role: pulsar/broker/_pre_brokerListVar,
        when: (rolling_restart_only is not defined or not rolling_restart_only|bool) }

# - Update Pulsar component log flush behavior
- hosts: pulsarClient
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  tasks:
  - name: Update Pulsar log flush behavior 
    lineinfile:
      dest: "{{ tgt_pulsar_inst_dir }}/conf/log4j2.yaml"
      state: present
      regexp: "^\\s*immediateFlush:"
      line: "      immediateFlush: true"
    when: (rolling_restart_only is not defined or not rolling_restart_only|bool) and
          (immediate_flush is defined and immediate_flush|bool)


#########################
# Rolling restart the Pulsar cluster with the following sequence
# - Dedicated function workers
# - Broker
# - Bookkeeper
# - Zookeeper
# -----------------------
# Update and restart dedicated function brokers
- hosts: functions_worker
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: 1
  vars:
    hostNameStr2: "{{ private_ip | replace('.', '-') }}"
    srvStarted: true
    srv_component: 'functions_worker'
    srv_key_name: "{{ srv_component }}.{{ hostNameStr2 }}.key-pk8.pem"
    srv_cert_name: "{{ srv_component }}.{{ hostNameStr2 }}.crt.pem"
    srv_ports: [
      "{% if enable_fwrkr_tls|bool %}{{ funcs_worker_port_tls }}{% else %}{{ funcs_worker_port }}{% endif %}"
    ]
    bkup_subfolder_name: "ConfigUpdate-{{ ansible_date_time.epoch }}"
  roles:
    # Check the current status of function workers
    - { role: misc/_check_svc_status,
        when: (deploy_functions_worker is defined and deploy_functions_worker == 'dedicated') and 
              (restart_component is not defined or restart_component==srv_component) }
    # Stop function workers
    - { role: pulsar/common/pulsar_stopSvc, srvStarted: true, 
        when: (deploy_functions_worker is defined and deploy_functions_worker == 'dedicated') and 
              (restart_component is not defined or restart_component==srv_component) }
    # Backup existing configuration files 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'config_update',
        when: (deploy_functions_worker is defined and deploy_functions_worker == 'dedicated') and 
              (rolling_restart_only is not defined or not rolling_restart_only|bool) and 
              (restart_component is not defined or restart_component==srv_component) }
    # Update configuration files
    - { role: pulsar/functions_worker/fwrkr_config,
        when: (deploy_functions_worker is defined and deploy_functions_worker == 'dedicated') and 
              (rolling_restart_only is not defined or not rolling_restart_only|bool) and 
              (restart_component is not defined or restart_component==srv_component) }
    # Start function workers
    - { role: pulsar/common/pulsar_startSvc,  
        srvStarted: false, 
        srv_options: "{{ funcs_worker_jvm_options|trim|replace('\n',' ') }}",
        when: (deploy_functions_worker is defined and deploy_functions_worker == 'dedicated') and 
              (restart_component is not defined or restart_component==srv_component) }

# Update and restart brokers
- hosts: broker
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: 1
  vars:
    hostNameStr2: "{{ private_ip | replace('.', '-') }}"
    srvStarted: true
    srv_component: 'broker'
    srv_key_name: "{{ srv_component }}.{{ hostNameStr2 }}.key-pk8.pem"
    srv_cert_name: "{{ srv_component }}.{{ hostNameStr2 }}.crt.pem"
    srv_ports: [
        "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}{{ web_svc_port_tls }}{% else %}{{ web_svc_port }}{% endif %}",
        "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}{{ broker_svc_port_tls }}{% else %}{{ broker_svc_port }}{% endif %}"
      ]
    bkup_subfolder_name: "ConfigUpdate-{{ ansible_date_time.epoch }}"
  roles:
    # Check the current status of brokers
    - { role: misc/_check_svc_status, 
        when: (restart_component is not defined or restart_component==srv_component) }
    # Stop brokers
    - { role: pulsar/common/pulsar_stopSvc, 
        when: (restart_component is not defined or restart_component==srv_component) }
    # Backup existing configuration files 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'config_update',
        when: (rolling_restart_only is not defined or not rolling_restart_only|bool) and 
              (restart_component is not defined or restart_component==srv_component) }
    # Update configuration files
    - { role: pulsar/broker/brkr_config, 
        when: (rolling_restart_only is not defined or not rolling_restart_only|bool) and 
              (restart_component is not defined or restart_component==srv_component) }
    # Start brokers
    - { role: pulsar/common/pulsar_startSvc, srvStarted: false, srv_options: "{{ broker_jvm_options|trim|replace('\n',' ') }}",
        when: (restart_component is not defined or restart_component==srv_component) }

# Update and restart bookkeeper
- hosts: bookkeeper
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: 1
  vars:
    srvStarted: true
    srv_component: 'bookie'
    srv_ports: ["{{ bookie_listening_port }}"]
    bkup_subfolder_name: "ConfigUpdate-{{ ansible_date_time.epoch }}"
  roles:
    # Check the current status of bookies
    - { role: misc/_check_svc_status, 
        when: (restart_component is not defined or restart_component==srv_component) }
    # Stop bookies
    - { role: pulsar/common/pulsar_stopSvc, 
        when: (restart_component is not defined or restart_component==srv_component) }
    # Backup existing configuration files 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'config_update',
        when: (rolling_restart_only is not defined or not rolling_restart_only|bool) and
              (restart_component is not defined or restart_component==srv_component) }
    # Update configuration files
    - { role: pulsar/bookie/bkie_config, 
        when: (rolling_restart_only is not defined or not rolling_restart_only|bool) and
              (restart_component is not defined or restart_component==srv_component) }
    # Start bookies
    - { role: pulsar/common/pulsar_startSvc, srvStarted: false, srv_options: "{{ bookie_jvm_options|trim|replace('\n',' ') }}", 
        when: (restart_component is not defined or restart_component==srv_component) }

# Update and restart bookkeeper 
- hosts: zookeeper
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: 1
  vars:
    srvStarted: true
    srv_component: 'zookeeper'
    srv_ports: ["{{ zk_clnt_port }}"]
    bkup_subfolder_name: "ConfigUpdate-{{ ansible_date_time.epoch }}"
  roles:
    # Check the current status of zookeepers
    - { role: misc/_check_svc_status, 
        when: (restart_component is not defined or restart_component==srv_component) }
    # Stop zookeepers
    - { role: pulsar/common/pulsar_stopSvc, 
        when: (restart_component is not defined or restart_component==srv_component) }
    # Backup existing configuration files 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'config_update',
        when: (rolling_restart_only is not defined or not rolling_restart_only|bool) and
              (restart_component is not defined or restart_component==srv_component) }
    # Update configuration files
    - { role: pulsar/zookeeper/zkpr_config,
        when: (rolling_restart_only is not defined or not rolling_restart_only|bool) and
              (restart_component is not defined or restart_component==srv_component) }
    # Start zookeepers
    - { role: pulsar/common/pulsar_startSvc, srvStarted: false, srv_options: "{{ zk_jvm_options|trim|replace('\n',' ') }}", 
        when: (restart_component is not defined or restart_component==srv_component) }


#########################
# Configure Pular clients
# -----------------------
# - 
- hosts: pulsarClient
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  roles:
    # Config Pulsar client (client.conf)
    - { role: pulsar/client/clnt_config,
        when: (rolling_restart_only is not defined or not rolling_restart_only|bool) }