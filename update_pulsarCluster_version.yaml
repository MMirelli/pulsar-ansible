---
#########################
#
# NOTE: This only works when there are NO different server components sharing 
#       one server host machine !!!
#
# Update Pulsar version in the cluster
# - This includes either version upgrade or downgrade
# - The version change is made by updating each Pulsar server host machine one by one (rolling update)
#
# Before the update, do the following check to make sure it is valid version update. Skip the update
# if either of the following condition is true
# 1) the Pulsar service on the target host is not up and running
# 2) the current Pulsar version is not the same as the target Pulsar version
#
# When it is ok to update the version, execute the following tasks:
# - stop the Pulsar process (only applicable to Pulsar servers, not standalone Pulsar clients)
# - backup the old/existing version Pulsar config files
# - cleanup the old/existing version Pulsar binary files (except data subdirectory if default data location is used)
# - update the Pulsar binary to the new version
# - set up the config files based on the target version
# - start the Pulsar process (only applicable to Pulsar servers, not standalone Pulsar clients)
# -----------------------


#########################
# PreWork
# -----------------------
- hosts: pulsarClient
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  roles: 
    # Set global variables to be used in other tasks/roles
    - { role: pulsar/common/pulsar_setGlobalVars, varList: 'all' }


##########################
# Update Pulsar version for zookeepers
#
- hosts: zookeeper
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: 1
  vars:
    srvStarted: true
    skip_version_update: true
    srv_ports: ["{{ zk_clnt_port }}"]
    srv_options: "{{ zk_jvm_options|trim|replace('\n',' ') }}"
    bkup_subfolder_name: "VersionChange-{{ ansible_date_time.epoch }}"
  pre_tasks:
    - name: Check if the Pulsar service is up and running. Set the service status accordingly.
      include_role:
        name: pulsar/common/pulsar_chkCurVer
      when: srv_select_criteria
  roles:
    # Get Pulsar binary tarball file of the target version to the server host machine
    - { role: pulsar/common/pulsar_getBinary, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Stop zookeepers
    - { role: pulsar/common/pulsar_stopSvc, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Backup the configuration files of the current Pulsar version
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'version_update',
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Clean up the old binary files (in order to avoid mixed libraries), but no data directories
    - { role: pulsar/common/pulsar_resetBinaryNoData, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Install the Pulsar binary of the target version
    - { role: pulsar/common/pulsar_instBinary, keep_newer_files: no, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Set up the configuration files of the target Pulsar version
    - { role: pulsar/zookeeper/zkpr_config, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Start zookeepers
    - { role: pulsar/common/pulsar_startSvc, srvStarted: false, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }


##########################
# Update Pulsar version for bookkeepers, including bookkeeper sanity check
#
- hosts: bookkeeper
  gather_facts: true
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: 1
  vars:
    srvStarted: true
    skip_version_update: true
    srv_ports: ["{{ bookie_listening_port }}"]
    srv_options: "{{ bookie_jvm_options|trim|replace('\n',' ') }}"
    bkup_subfolder_name: "VersionChange-{{ ansible_date_time.epoch }}"
  pre_tasks:
    - name: Check if the Pulsar service is up and running. Set the service status accordingly.
      include_role:
        name: pulsar/common/pulsar_chkCurVer
      when: srv_select_criteria
  roles: 
    # Get Pulsar binary tarball file of the target version to the server host machine
    - { role: pulsar/common/pulsar_getBinary,
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Stop bookkeepers
    - { role: pulsar/common/pulsar_stopSvc, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Backup the configuration files of the current Pulsar version
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'version_update',
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Clean up the old binary files (in order to avoid mixed libraries), but no data directories
    - { role: pulsar/common/pulsar_resetBinaryNoData, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Install the Pulsar binary of the target version
    - { role: pulsar/common/pulsar_instBinary, keep_newer_files: no, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Set up the configuration files of the target Pulsar version
    - { role: pulsar/bookie/bkie_config, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Start bookkeepers
    - { role: pulsar/common/pulsar_startSvc, srvStarted: false, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }

# - Sanity test of whether bookies are up and running properly
- hosts: bookkeeper
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  run_once: true
  roles:
    - { role: pulsar/bookie/bkie_sanityCheck, srv_options: "{{ bookie_jvm_options_b|trim|replace('\n',' ') }}",
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }


##########################
# Update Pulsar version for brokers
#
- hosts: broker
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: 1
  vars:
    srvStarted: true
    skip_version_update: true
    hostNameStr2: "{{ private_ip | replace('.', '-') }}"
    srv_key_name: "{{ srv_component }}.{{ hostNameStr2 }}.key-pk8.pem"
    srv_cert_name: "{{ srv_component }}.{{ hostNameStr2 }}.crt.pem"
    srv_ports: [
        "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}{{ web_svc_port_tls }}{% else %}{{ web_svc_port }}{% endif %}",
        "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}{{ broker_svc_port_tls }}{% else %}{{ broker_svc_port }}{% endif %}"
      ]
    srv_options: "{{ broker_jvm_options|trim|replace('\n',' ') }}"
    bkup_subfolder_name: "VersionChange-{{ ansible_date_time.epoch }}"
  pre_tasks:
    - name: Check if the Pulsar service is up and running. Set the service status accordingly.
      include_role:
        name: pulsar/common/pulsar_chkCurVer
      when: srv_select_criteria
  roles: 
    # Get Pulsar binary tarball file of the target version to the server host machine
    - { role: pulsar/common/pulsar_getBinary,
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Stop brokers
    - { role: pulsar/common/pulsar_stopSvc, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Backup the configuration files of the current Pulsar version 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'version_update',
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Clean up the old binary files (in order to avoid mixed libraries), but no data directories
    - { role: pulsar/common/pulsar_resetBinaryNoData, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Install the Pulsar binary of the target version
    - { role: pulsar/common/pulsar_instBinary, keep_newer_files: no, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Copy the nar file needed for broker side message filtering
    - { role: pulsar/broker/brkr_deploy_msgFilterPkg, 
        when: srv_select_criteria and enable_srvside_msg_filtering|bool and pulsarLS_bin_opt=="core" }
    # Set up the configuration files of the target Pulsar version
    - { role: pulsar/broker/brkr_config, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Start brokers
    - { role: pulsar/common/pulsar_startSvc, srvStarted: false, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }


##########################
# Update Pulsar version for dedicated autorecovery nodes
#
- hosts: autorecovery
  gather_facts: true
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: 1
  vars:
    srvStarted: true
    skip_version_update: true
    srv_ports: ["{{ autorecovery_stats_port }}"]
    srv_options: "{{ autorecovery_jvm_options|trim|replace('\n',' ') }}"
    bkup_subfolder_name: "VersionChange-{{ ansible_date_time.epoch }}"
  pre_tasks:
    - name: Check if the Pulsar service is up and running. Set the service status accordingly.
      include_role:
        name: pulsar/common/pulsar_chkCurVer
      when: srv_select_criteria and autorecovery_option=='dedicated'
  roles:
    # Get Pulsar binary tarball file of the target version to the server host machine
    - { role: pulsar/common/pulsar_getBinary,
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and
              autorecovery_option=='dedicated' }
    # Stop function workers
    - { role: pulsar/common/pulsar_stopSvc, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and
              autorecovery_option=='dedicated' }
    # Backup the configuration files of the current Pulsar version 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'version_update',
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and 
              autorecovery_option=='dedicated' }
    # Clean up the old binary files (in order to avoid mixed libraries), but no data directories
    - { role: pulsar/common/pulsar_resetBinaryNoData, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and
              autorecovery_option=='dedicated' }
    # Install the Pulsar binary of the target version
    - { role: pulsar/common/pulsar_instBinary, keep_newer_files: no, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and
              autorecovery_option=='dedicated' }
    # Set up the configuration files of the target Pulsar version
    - { role: pulsar/autorecovery/ar_config, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and
              autorecovery_option=='dedicated' }
    # Start function workers
    - { role: pulsar/common/pulsar_startSvc, srvStarted: false,  
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and
              autorecovery_option=='dedicated' }


##########################
# Update Pulsar version for dedicated function workers
#
- hosts: functions_worker
  gather_facts: true
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  serial: 1
  vars:
    srvStarted: true
    skip_version_update: true
    hostNameStr2: "{{ private_ip | replace('.', '-') }}"
    srv_key_name: "{{ srv_component }}.{{ hostNameStr2 }}.key-pk8.pem"
    srv_cert_name: "{{ srv_component }}.{{ hostNameStr2 }}.crt.pem"
    srv_ports: [
      "{% if enable_fwrkr_tls|bool %}{{ funcs_worker_port_tls }}{% else %}{{ funcs_worker_port }}{% endif %}"
    ]
    srv_options: "{{ funcs_worker_jvm_options|trim|replace('\n',' ') }}"
    bkup_subfolder_name: "VersionChange-{{ ansible_date_time.epoch }}"
  pre_tasks:
    - name: Check if the Pulsar service is up and running. Set the service status accordingly.
      include_role:
        name: pulsar/common/pulsar_chkCurVer
      when: srv_select_criteria and deploy_functions_worker=='dedicated'
  roles:
    # Get Pulsar binary tarball file of the target version to the server host machine
    - { role: pulsar/common/pulsar_getBinary,
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and
              deploy_functions_worker=='dedicated' }
    # Stop function workers
    - { role: pulsar/common/pulsar_stopSvc, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and
              deploy_functions_worker == 'dedicated' }
    # Backup the configuration files of the current Pulsar version 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'version_update',
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and 
              deploy_functions_worker == 'dedicated' }
    # Clean up the old binary files (in order to avoid mixed libraries), but no data directories
    - { role: pulsar/common/pulsar_resetBinaryNoData, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and
              deploy_functions_worker == 'dedicated' }
    # Install the Pulsar binary of the target version
    - { role: pulsar/common/pulsar_instBinary, keep_newer_files: no, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and
              deploy_functions_worker == 'dedicated' }
    # Set up the configuration files of the target Pulsar version
    - { role: pulsar/functions_worker/fwrkr_config, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and
              deploy_functions_worker == 'dedicated' }
    # Start function workers
    - { role: pulsar/common/pulsar_startSvc, srvStarted: false,  
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) and
              deploy_functions_worker == 'dedicated' }


##########################
# Update Pulsar version for standalone Pulsar clients
#
# NOTE: Do NOT use a host machine betas both a Pulsar server and a standalone Pulsar client !!!
#
- hosts: pulsarStandAloneClient
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  vars:
    skip_version_update: true
    bkup_subfolder_name: "VersionChange-{{ ansible_date_time.epoch }}"
  pre_tasks:
    - name: Check if the Pulsar service is up and running. Set the service status accordingly.
      include_role:
        name: pulsar/common/pulsar_chkCurVer
      when: srv_select_criteria
  roles: 
    # Get Pulsar binary tarball file of the target version to the server host machine
    - { role: pulsar/common/pulsar_getBinary, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Backup the configuration files of the current Pulsar version 
    - { role: pulsar/common/pulsar_bkupConfig, cfg_bkup_operation: 'version_update',
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Clean up the old binary files (in order to avoid mixed libraries), but no data directories
    - { role: pulsar/common/pulsar_resetBinaryNoData, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }
    # Install the Pulsar binary of the target version
    - { role: pulsar/common/pulsar_instBinary, keep_newer_files: no, 
        when: srv_select_criteria and cur_pulsar_ver is not search(pulsarLS_ver) }


#########################
# Update "client.conf" on all host machines with Pulsar
#   binary, including Pulsar servers and standalone Pulsar clients
# -----------------------
# - 
- hosts: pulsarClient
  any_errors_fatal: true
  become: "{{ sudo_needed }}"
  become_method: sudo
  roles:
    - { role: pulsar/client/clnt_config, when: srv_select_criteria }