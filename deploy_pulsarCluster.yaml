---
#########################
# PreWork
# -----------------------
- hosts: LSCluster
  become: "{{ sudo_needed }}"
  become_method: sudo
  any_errors_fatal: true
  roles: 
    - { role: misc/_inst_openjdk }

# - Get zookeeper list in deseried formats and save them in variables
#   They are needed in later steps for Pulsar configurations
- hosts: zookeeper
  gather_facts: true
  any_errors_fatal: true
  run_once: true
  roles: 
    - { role: pulsar/zookeeper/_pre_zkArrListVar }

# - Get broker list in deseried formats and save them in variables
#   They are needed in later steps for Pulsar configurations
- hosts: broker
  gather_facts: true
  any_errors_fatal: true
  run_once: true
  roles: 
    - { role: pulsar/broker/_pre_brokerListVar }


#########################
# Install Pulsar server binary
# -----------------------
- hosts: pulsarClient
  become: "{{ sudo_needed }}"
  become_method: sudo
  any_errors_fatal: true
  roles: 
    - { role: pulsar/common/pulsar_instBinary }


#########################
# Zookeeper Related
# -----------------------
# - Configure and start zookeepers
- hosts: zookeeper
  become: "{{ sudo_needed }}"
  become_method: sudo
  any_errors_fatal: true
  vars:
    srvStarted: true
  roles: 
    # If needed, mount dedicated storage space to zookeepers
    - { role: pulsar/zookeeper/zkpr_mntStorage, when: not skip_zk_block_device_setup|bool }
    # Config zookeepers 
    - { role: pulsar/zookeeper/zkpr_config }
    # Check the current status of zookeepers
    - { role: misc/_check_svc_status, 
        srv_component: 'zookeeper', 
        srv_ports: ["{{ zk_clnt_port }}"] }
    # Start zookepers
    - { role: pulsar/common/pulsar_startSvc, 
        srv_component: 'zookeeper', 
        srv_options: "{{ zk_jvm_options }}",
        srv_ports: ["{{ zk_clnt_port }}"] }

# - Initialzie Pulsar cluster metadata after zookeepers are up and running
- hosts: zookeeper
  any_errors_fatal: true
  run_once: true
  roles: 
    - { role: pulsar/zookeeper/zkpr_initMetadata }


#########################
# Bookkeeper Related
# -----------------------
# - Configure and start bookkeepers
- hosts: bookkeeper
  become: "{{ sudo_needed }}"
  become_method: sudo
  any_errors_fatal: true
  vars:
    srvStarted: true
  roles: 
    # If needed, mount dedicated storage space to bookkeepers
    - { role: pulsar/bookkeeper/bkie_mntStorage, when: not skip_bookie_block_device_setup|bool }
    # Config bookies 
    - { role: pulsar/bookkeeper/bkie_config }
    # Check the current status of bookies
    - { role: misc/_check_svc_status, 
        srv_component: 'bookie', 
        srv_ports: ["{{ bookie_listening_port }}"] }
    # Start bookies
    - { role: pulsar/common/pulsar_startSvc, 
        srv_component: 'bookie', 
        srv_options: "{{ bookie_jvm_options }}",
        srv_ports: ["{{ bookie_listening_port }}"] }

# - Sanity test of whether bookies are up and running properly
- hosts: bookkeeper
  run_once: true
  roles:
    - { role: pulsar/bookkeeper/bkie_sanityCheck }


#########################
# Generate security related files (only relevant when Pulsar security is enabled). 
# - JWT tokens and keys
# - TLS certificates and keys
#
# NOTE: this step will run bash script locally. This means that the localhost
#       can't be Windows based machine. Linux or Mac machine are fine.
# -----------------------
- hosts: localhost
  connection: local
  vars:
    showLocalCmdOutput: true
  roles:
    - { role: local_security/create_jwt_token, 
        when: enable_brkr_authNZ is defined and enable_brkr_authNZ|bool and 
              skip_brkr_jwt_token_generation is defined and not skip_brkr_jwt_token_generation|bool
      }
    - { role: local_security/create_tls_certs,
        when: enable_brkr_tls is defined and enable_brkr_tls|bool and 
              skip_brkr_tls_certs_generatation is defined and not skip_brkr_tls_certs_generatation|bool }


#########################
# Broker Related
# -----------------------
# - Configure brokers
- hosts: broker
  become: "{{ sudo_needed }}"
  become_method: sudo
  any_errors_fatal: true
  vars:
    hostNameStr2: "{{ private_ip | replace('.', '-') }}"
    broker_key_name: "broker.{{ hostNameStr2 }}.key-pk8.pem"
    broker_cert_name: "broker.{{ hostNameStr2 }}.crt.pem"
  roles: 
    # Config broker non-security related settings
    - { role: pulsar/broker/brkr_config }
    # If needed, config broker security related settings
    - { role: pulsar/broker/brkr_secConfig, when: enable_brkr_security|bool }


# - Start brokers in serial mode
#   NOTE: concurrent broker start seems having issue when function is enabled as part of the broker
- hosts: broker
  become: "{{ sudo_needed }}"
  become_method: sudo
  any_errors_fatal: true
  serial: 1
  vars:
    srvStarted: true
  roles: 
    # Check the current status of brokers
    - { role: misc/_check_svc_status, 
        srv_component: 'broker', 
        srv_ports: [
            "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}{{ web_svc_port_tls }}{% else %}{{ web_svc_port }}{% endif %}",
            "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}{{ broker_svc_port_tls }}{% else %}{{ broker_svc_port }}{% endif %}"
          ] 
      }
    # Start brokers
    - { role: pulsar/common/pulsar_startSvc, 
        srv_component: 'broker', 
        srv_options: "{{ broker_jvm_options }}",
        srv_ports: [
            "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}{{ web_svc_port_tls }}{% else %}{{ web_svc_port }}{% endif %}",
            "{% if enable_brkr_tls is defined and enable_brkr_tls|bool %}{{ broker_svc_port_tls }}{% else %}{{ broker_svc_port }}{% endif %}"
          ] 
      }


#########################
# Configure Pular clients
# -----------------------
# - 
- hosts: pulsarClient
  become: "{{ sudo_needed }}"
  become_method: sudo
  any_errors_fatal: true
  roles:
    # Config pulsar client non-security related settings
    - { role: pulsar/client/clnt_config }
    # Config pulsar clients with security settings
    # NOTE: Make sure to execute  "deploy_pulsar_cluster.yaml" playbook first, 
    #       which will deploy the required JWT token and TLS certificate files
    #       if Pulsar security feature is enabled !
    - { role: pulsar/client/clnt_secConfig, when: enable_brkr_security|bool }


#########################
# PostWork
# -----------------------
# - Update .profile for all hosts in cluster
- hosts: pulsarServer:pulsarClient
  tasks:
  - name: Add Pulsar executeables in $PATH system variable
    lineinfile:
      # dest: ~/.bash_profile
      dest: ~/.profile
      state: present
      line: "{{ item }}"
    with_items:
      - export PULSAR_HOME={{ tgt_pulsar_inst_dir }}
      - export PATH="$PULSAR_HOME/bin:$PATH"