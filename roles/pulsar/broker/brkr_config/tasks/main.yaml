---
- name: For each cluster, get bookie node count into a temporary file "/tmp/bookieCnt"
  template: src=bookie_node_cnt.j2 dest=/tmp/bookieCnt mode="{{ file_permission_mode_noexec }}"

- name: Load tempoarary "/tmp/bookieCnt" file
  shell: cat /tmp/bookieCnt
  register: bookieCnt_cmdcat

- name: Set bookie node count into a variable
  set_fact: 
    bookieCnt={{ bookieCnt_cmdcat.stdout}}
- debug: msg="{{ bookieCnt }}"
  when: show_debug_msg|bool

- name: Set ensemble size, write, and ack quorum count
  set_fact:
    ensemble_size: "{% if force_message_rf_setting is defined and force_message_rf_setting|bool %}{{ cust_ensemble_size }}{% elif bookieCnt|int >= 3 %}3{% else %}{{ bookieCnt|int }}{% endif %}"
    write_quorum_cnt: "{% if force_message_rf_setting is defined and force_message_rf_setting|bool %}{{ cust_write_quorum }}{% elif bookieCnt|int >= 3 %}3{% else %}{{ bookieCnt|int }}{% endif %}"
    ack_quorum_cnt: "{% if force_message_rf_setting is defined and force_message_rf_setting|bool %}{{ cust_ack_quorum }}{% elif bookieCnt|int >= 3 %}2{% else %}1{% endif %}"
- debug: msg="ensemble_size={{ ensemble_size }}, write_quorum_cnt={{ write_quorum_cnt }}, ack_quorum_cnt={{ ack_quorum_cnt }}"
  when: show_debug_msg|bool

- name: Modify Pulsar broker config file for non-security related settings
  lineinfile:
    path: "{{ broker_conf_file }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^zookeeperServers=', line: "zookeeperServers={{ zkListStrVar }}" }
    - { regexp: '^configurationStoreServers=', line: "configurationStoreServers={{ zkListStrVar }}" }
    - { regexp: '^clusterName=', line: 'clusterName={{ cluster_name }}' }
    - { regexp: '^brokerServicePort=', line: 'brokerServicePort={{ broker_svc_port }}' }
    - { regexp: '^webServicePort=', line: 'webServicePort={{ web_svc_port }}' }
    - { regexp: '^managedLedgerDefaultEnsembleSize=', line: 'managedLedgerDefaultEnsembleSize={{ ensemble_size }}'}
    - { regexp: '^managedLedgerDefaultWriteQuorum=', line: 'managedLedgerDefaultWriteQuorum={{ write_quorum_cnt }}' }
    - { regexp: '^managedLedgerDefaultAckQuorum=', line: 'managedLedgerDefaultAckQuorum={{ ack_quorum_cnt }}' }
    - { regexp: '^functionsWorkerEnabled=', line: 'functionsWorkerEnabled=true' }
    # - { regexp: '^forceDeleteTenantAllowed=', line: 'forceDeleteTenantAllowed=true' }
    # - { regexp: '^forceDeleteNamespaceAllowed=', line: 'forceDeleteNamespaceAllowed=true' }
    # - { regexp: '^brokerDeleteInactiveTopicsEnabled=', line: 'brokerDeleteInactiveTopicsEnabled=false' }